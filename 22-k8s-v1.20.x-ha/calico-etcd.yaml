---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOEsxQUdZNk1DZ1VxNjNuRWJ1L1hGSWhnVFJSa2J3MDJZdEhZeXBxZzJEbEcxNU9sCkxsdWwxMEI3ajdOUjBTUnUxNjVwaG5ydk01eWE5SDNqWVNoWHpleUZsaHFkNUdBSmhTNEJSeFJha1pUUkh2aVMKa3dESUNXRmZTRTAwZ2toZ1NGZ3JnS1RTWU9HNnl3NlU0eWVkZ1MrMVJlVDFYTWtYT3V5Vmw2SUZTUmRTMTFUOApJcFFEUkJ4S1AvQkVOWHRWTndlRlozczIweFR6OHpiZzJROEwyQ1NKa2p5VWRoMUtpTjNycG5CR2RwTkhXamMwCjY0ZmhHWmJxc1phMzc4SzJ6d3YxeU9NcVdsdERGRWo1ZG5GOFRZUVR5Vm5TSzBFNWthcFNRdGdFWXJDWElLeW8KWWhxZ0t6S3N4ajdhQ2U4b2JqL2s1cGtBdVpXVkQ1ZHdZeVM3MHdJREFRQUJBb0lCQVFDTGVodlhzOEI4WGhwTgpkTGZlQXFpR2diSXRlVS9xKzZFMUM1K3phb0VrVGEwOGFaZ2trWUEraW1RUkZ6Nm5FWklhOUR5N2Jxc0pJZ3k2CisrbTErSWRLRTNRblZTMkRtQlJzVmdqdmhHQW9WaklLM01zMDNoTVBQSnJYYjhhcWFmOUNiYlpvU3h5UWdNQ2IKeE11TUNQMUNUTCtremRkVCtrVzRKRHRkTU13WFdvazNjaDgxcDFvaE9oRSszemFVajdSRVF5NGdNTVViTTdPVApBaTNxN3NjZUNaMDZWNzh5NDQrQ1p3ckYzbWJMRWxIUFZ4WkRFZE9qWTczYmcvT2Fud084NUhUMFBndXd3MFlICnpFaW5CREhnMmErM0Z5WEVkMzNJMHZuR1NyM2ZzYzV3Y0lkSTBWdjhIM3dIR0Z3MWxsVkVmMnR5YU5tTDZ2WlUKWk9DU25TREJBb0dCQVBsT01VNElia1ZsUmpjN0p0Y2ZmY0RKQzRacjVhNlVNVFVYcVFMSVlvMjRYck5KUGlCRQo5QWV0SWtiaUhRY2VaUVNONGEzZytzUjRETzlvQ1RRV3NaaXBUeWxFK04raDBPWkRYNHh5a2UyNDQvQnJtbnIrCkNzSnFkbXRSc1RyQmFyUVBLdUhYUEFFbGQvYVZIbnFjd2orRzBDcjdyT01zUWl5emVlNlhVWi9KQW9HQkFQY2oKdmMwcDBtREVycVBMd3BGdWZXMEovTmU3SUdBZ2hvVk5xNjVCT2hTNTA0THlmcVZNV01jNThrbHFQUnVIa2xZWAphbjRvQlFUREI0aDljUXl2L0p4dm5HRHZHQm1hM04rQlIxdGNLcXB6cDR4NzdOR2pmQkNrcGxZZmQ4NVU4bTAwClMxZVBRby93M1ZzMHltV2tOcnRFR1VMS0J2Z3RtOTE4TkhIZGh1UzdBb0dCQUl1NTZtSmMwVWp0b1BQMW9DZ3oKeXl4UXdiZmVJMFc4WXZQcHhkejhhRmdidkYvcHJmc3lDajkvSnRYcGh2RmxkS0tmenB2QW0ydWdDVWZvM0RlbwpmSE1lZVhLYzZJdVdTdG16YXdyeGI1NTM0TER2N2czKzhoTFN6bm9KdURaQkQwZkp0SFFOU09Fdm1kUEc4ZVV3CmxLSThNZEhWYXFtTU5hNk9ETW5QWDMwWkFvR0FSTG55d1VnZEVmNEFGdHJHRzgxZkllQ0NLTGdJRTlOWHRXQloKR3RkV3dJYkF0QXlkZlhoU3creHdYVXdtL0MzaVd3Q2VBOEU3VEF5MFhwZUx4WngzSWtYRGRnMW5aVTkwbHM4TAp1Zk5TaGg0dGZOckZpN0xzQUhEWk5PQUJZQ2F0V0FNUDVLU1pQUkFkYm95cXNFTlBXUnBoNy9uZ29FbUdxN3dyCmxYS21YWnNDZ1lBUlZabUM1TFdGSkpFU0JxS21WYlNIaVpaOXIyeU13N3NnT2tDUlBzdGpEUlJ4Wk9lVDF2K00KWWFKenAyVTMzNG94cmdUc3UvcHViN21UNUt6anIwRmVtdjdOeHRJcHRCekxxQ2ZxK2ZmK2pYdWZPOWMyTndtdApOeS80czBGbWg5bVRIemF4QWd0amxmaWRaMDVLY01qYUwwN0ZBVHpWdEkzRmdTVUpyMVNmWHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMVENDQWhXZ0F3SUJBZ0lJR2JIWUdJbTBoRlF3RFFZSktvWklodmNOQVFFTEJRQXdFakVRTUE0R0ExVUUKQXhNSFpYUmpaQzFqWVRBZUZ3MHlNVEF6TVRnd056TXlNVFZhRncweU1qQXpNVGd3TnpNeU1UWmFNQTB4Q3pBSgpCZ05WQkFNVEFtMHhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQThLMUFHWTZNCkNnVXE2M25FYnUvWEZJaGdUUlJrYncwMll0SFl5cHFnMkRsRzE1T2xMbHVsMTBCN2o3TlIwU1J1MTY1cGhucnYKTTV5YTlIM2pZU2hYemV5RmxocWQ1R0FKaFM0QlJ4UmFrWlRSSHZpU2t3RElDV0ZmU0UwMGdraGdTRmdyZ0tUUwpZT0c2eXc2VTR5ZWRnUysxUmVUMVhNa1hPdXlWbDZJRlNSZFMxMVQ4SXBRRFJCeEtQL0JFTlh0Vk53ZUZaM3MyCjB4VHo4emJnMlE4TDJDU0pranlVZGgxS2lOM3JwbkJHZHBOSFdqYzA2NGZoR1picXNaYTM3OEsyend2MXlPTXEKV2x0REZFajVkbkY4VFlRVHlWblNLMEU1a2FwU1F0Z0VZckNYSUt5b1locWdLektzeGo3YUNlOG9iai9rNXBrQQp1WldWRDVkd1l5Uzcwd0lEQVFBQm80R0xNSUdJTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVZExkVDlUeWdOK2NTd3pidnI2MlgKakM2VkRXd3dOZ1lEVlIwUkJDOHdMWUlKYkc5allXeG9iM04wZ2dKdE1ZY0V3S2dMZFljRWZ3QUFBWWNRQUFBQQpBQUFBQUFBQUFBQUFBQUFBQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQU82TUs1VEdKdCtZM3NuVnNxZjFXCmpaanA1a2RTK1AvK0I0YWFoU0NVWUdzMXdkb2ppTzBmMGdpZC8xUHdndVBibDU3RGJlVDR0N1ljQmRNVzh4YisKcW4zTmdIT1dKdlhUeW9pLzMxd25uSGpuZ09wbWQ5cWVkZHVtRjJUclBySGRZemlTWm11NDB2VmlRME5QRmpRSgpVTk5Wekx3Um1NY1dwaUhNRUtJckprajZTQ2ZOUDZlNHp0aGRnZ3hjck5PK0EvcFpDd2dNQXVZRktGbFIzQk1ZCjYvbEJhS3ZUZGdBR3JLUzY0dU93cVUzcHYvUHFPVGxERCs4c05xZTlFY24xNHlsQy8wUlRYUWt1ck43dEFXTnEKZkY4czN0SCtkbkUrM1JDdm1Xb2dOVjUwZytWdTZab0NvdWdPNWJSNG45UUhVcGkyenZQKzNLU1puQ3paWVk5cwpvUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM0VENDQWNtZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkbGRHTmsKTFdOaE1CNFhEVEl4TURNeE9EQTNNekl4TlZvWERUTXhNRE14TmpBM016SXhOVm93RWpFUU1BNEdBMVVFQXhNSApaWFJqWkMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5QNHNGcVJtNG1ZCnEvZ3ZyQ2xOMHpuTmRvOUNuNmdiN3lLa0xRdXlWQzl6TUZ0Z1YwaUg1alljeVZGU1NGZkQ4U085TzlGaW9YTEsKYmNnVGh1M0VidXNVL3FBMElkMkNWek5FRE0xYlVxUFR6NFg4cTJUNi8xZ1RqSXY3OHFab25DYkkrVHptLzFJTwozQUliaWkvYUlJSXlHdzQ4Z3hiU3NOSGErdUlPWHJtM01vVHl6TXJKMDE1R05HVlIwQzVicXBCVTNQa1Z4aXFMCnMvb1pEaFNYaUd2cEsvM2J6Sk4xQ252VzdMbDNnMnR1Wjg5TjVQWkpWeTVRUmJaVG9YSnk0S2dKUk9JYkpQcmkKZTkzQkQvV2gxamlsVzRaUGhPQkxmZVVOelgwaE5PeTdzUEQ3ZDFwbFhrT2szam1rYjVNRmZhS0NBSnhlY3FETwpnTmhoRmViajJEY0NBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdIUVlEVlIwT0JCWUVGSFMzVS9VOG9EZm5Fc00yNzYrdGw0d3VsUTFzTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRREhmVFlnQlRtUStNU1ErVVE0MEpUMi9VWGFpbUV2UURhVkNad3Nmek1Tdkw1Yml1M3ozSzhEMndmdwovUk9XTjdFWWpSY2NxQ1BHNEVZaTBCM0JMN3ROaHoyTFZIY0tJWUpqc0liKy9hcHcyVXRtZVlxdCtyQWU3WnZkClNHa3lYOFF6MVZUZVpnY1FHdnRWdUlCOUhIMU5uN3hyc3hCWDFGL1I1cGkvUW9vbFVuYTJaMWpxRzlCNkR5dG8KTzAyV3hGY2Z5dzBKWFhtV3M2dkhlUmR0K3E5K2F4L3hPZWhwejF1R01iclZKT3JQZDBWTTlaOFJMNFlsRlNqagpycGtjUlhvbGZ5S3FZaysvWUNqVHB0cTBHRzU3WnRadnhNdkpPY2Zla0dJTy9qMS91aFlmbktnL08wUFRpdlo1CklGOGFxVVlWcWczRnNLbE81b3NRWUFrN1d6ejcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://192.168.11.117:2379,https://192.168.11.108:2379,https://192.168.11.109:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"   # "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert" # "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"  # "/calico-secrets/etcd-key"
  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"
  # Configure the MTU to use for workload interfaces and tunnels.
  # - If Wireguard is enabled, set to your network MTU - 60
  # - Otherwise, if VXLAN or BPF mode is enabled, set to your network MTU - 50
  # - Otherwise, if IPIP is enabled, set to your network MTU - 20
  # - Otherwise, if not using any encapsulation, set to your network MTU.
  veth_mtu: "1440"

  # The CNI network configuration to install on each node. The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
# Source: calico/templates/calico-kube-controllers-rbac.yaml

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---

---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: registry.cn-beijing.aliyuncs.com/dotbalo/cni:v3.15.3
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: registry.cn-beijing.aliyuncs.com/dotbalo/pod2daemon-flexvol:v3.15.3
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: registry.cn-beijing.aliyuncs.com/dotbalo/node:v3.15.3
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: 10.244.0.0/16
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: registry.cn-beijing.aliyuncs.com/dotbalo/kube-controllers:v3.15.3
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---
# Source: calico/templates/calico-typha.yaml

---
# Source: calico/templates/configure-canal.yaml

---
# Source: calico/templates/kdd-crds.yaml


